{"version":3,"sources":["components/Navbar.js","components/TextForm.js","components/Alert.js","App.js","reportWebVitals.js","index.js"],"names":["Navbar","props","className","mode","href","title","type","id","aboutText","role","onClick","toggleMode","style","color","htmlFor","word","lower","toLowerCase","charAt","toUpperCase","slice","capitalize","TextForm","useState","text","setText","heading","backgroundColor","value","onChange","event","target","rows","btn","newText","alert","Set","split","Array","from","join","document","getElementById","select","navigator","clipboard","writeText","newtext","trim","length","Alert","msg","App","setmode","setalert","setbtn","togglealert","message","setTimeout","body","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.311ab2a5.chunk.js","sourcesContent":["import React from \"react\";\r\nimport { a } from \"react-router-dom\";\r\n\r\nexport default function Navbar(props) {\r\n  const capitalize = (word) => {\r\n    let lower = word.toLowerCase();\r\n    return lower.charAt(0).toUpperCase() + lower.slice(1);\r\n  };\r\n\r\n  return (\r\n    <nav\r\n      className={`navbar navbar-expand-lg navbar-${props.mode} bg-${props.mode}`}\r\n    >\r\n      <div className=\"container-fluid\">\r\n        <a className=\"navbar-brand\" href=\"/\">\r\n          {props.title}\r\n        </a>\r\n        <button\r\n          className=\"navbar-toggler\"\r\n          type=\"button\"\r\n          data-bs-toggle=\"collapse\"\r\n          data-bs-target=\"#navbarSupportedContent\"\r\n          aria-controls=\"navbarSupportedContent\"\r\n          aria-expanded=\"false\"\r\n          aria-label=\"Toggle navigation\"\r\n        >\r\n          <span className=\"navbar-toggler-icon\"></span>\r\n        </button>\r\n        <div className=\"collapse navbar-collapse\" id=\"navbarSupportedContent\">\r\n          <ul className=\"navbar-nav me-auto mb-2 mb-lg-0\">\r\n            <li className=\"nav-item\">\r\n              <a className=\"nav-a active\" aria-current=\"page\" href=\"/\">\r\n                Home\r\n              </a>\r\n            </li>\r\n            <li className=\"nav-item\">\r\n              <a className=\"nav-a\" href=\"#\">\r\n                {props.aboutText}\r\n              </a>\r\n            </li>\r\n          </ul>\r\n          {/* <div className=\"collapse navbar-collapse\" id=\"navbarSupportedContent\">\r\n          <ul className=\"navbar-nav me-auto mb-2 mb-lg-0\">\r\n            <li className=\"nav-item\">\r\n              <a className=\"nav-a active\" aria-current=\"page\" href=\"/about\">\r\n                About\r\n              </a>\r\n            </li>\r\n            <li className=\"nav-item\">\r\n              <a className=\"nav-a\" href=\"/\">\r\n                {props.aboutText}\r\n              </a>\r\n            </li>\r\n            </ul>\r\n            </div> */}\r\n          {/* <htmlhtmlForm className=\"d-flex\">\r\n            <input\r\n              className=\"htmlhtmlForm-control me-2\"\r\n              type=\"search\"\r\n              placeholder=\"Search\"\r\n              aria-label=\"Search\"\r\n            />\r\n            <button className=\"btn btn-outline-success\" type=\"submit\">\r\n              Search\r\n            </button> */}\r\n          {/* </htmlhtmlForm> */}\r\n          {/* <div className={`htmlhtmlForm-check htmlhtmlForm-switch text-{props.mode===\"dark\" ? \"light\" : \"dark\"}`}>\r\n            <input\r\n              className=\"htmlhtmlForm-check-input\"\r\n              type=\"checkbox\"\r\n              role=\"switch\"\r\n              id=\"flexSwitchCheckDefault\"\r\n              onClick={props.toggleMode}\r\n            />\r\n            <label\r\n              className=\"htmlhtmlForm-check-label\"\r\n              htmlhtmlhtmlFor=\"flexSwitchCheckDefault\"\r\n            >\r\n              DarkMode\r\n            </label>\r\n          </div> */}\r\n          <div\r\n            className={`form-check form-switch text-{props.mode===\"dark\" ? \"light\" : \"dark\"}`}\r\n          >\r\n            <input\r\n              className=\"form-check-input\"\r\n              type=\"checkbox\"\r\n              role=\"switch\"\r\n              id=\"flexSwitchCheckDefault\"\r\n              onClick={props.toggleMode}\r\n            />\r\n            <label\r\n              className={`form-check-label`}\r\n              style={{ color: props.mode === \"dark\" ? \"white\" : \"black\" }}\r\n              htmlFor=\"flexSwitchCheckDefault\"\r\n            >\r\n              {capitalize(props.mode)} Mode\r\n            </label>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </nav>\r\n  );\r\n}\r\n","import React, { useState } from \"react\";\r\n\r\nexport default function TextForm(props) {\r\n  const handleUpCLick = () => {\r\n    // console.log(\"UpperCase is Clicked\");\r\n    let newText = text.toUpperCase();\r\n    setText(newText);\r\n    props.alert(\"Converted to UpperCase\", \"success\");\r\n  };\r\n  const handleLoCLick = () => {\r\n    // console.log(\"UpperCase is Clicked\");\r\n    let newText = text.toLowerCase();\r\n    setText(newText);\r\n    props.alert(\"Converted to LowerCase\", \"success\");\r\n  };\r\n  const handleCopy = () => {\r\n    var text = document.getElementById(\"myBox\");\r\n    text.select();\r\n    navigator.clipboard.writeText(text.value);\r\n    props.alert(\"Copied to Clipboard \", \"success\");\r\n  };\r\n\r\n  const handleExcessSpaces = () => {\r\n    var newtext = text.split(/[  ]+/);\r\n    setText(newtext.join(\" \"));\r\n    props.alert(\"Extra Spaces Removed\", \"success\");\r\n  };\r\n\r\n  const handleredundancy = () => {\r\n    // console.log(\"UpperCase is Clicked\");\r\n    let newText = new Set(text.split(\" \"));\r\n    setText(Array.from(newText).join(\" \"));\r\n    props.alert(\"Redundancy Removed\", \"success\");\r\n  };\r\n  const clearText = () => {\r\n    // console.log(\"UpperCase is Clicked\");\r\n    let newText = \"\";\r\n    setText(newText);\r\n    props.alert(\"Text Cleared\", \"success\");\r\n  };\r\n  const handleOnChange = (event) => {\r\n    // console.log(\"OnChange \");\r\n    setText(event.target.value);\r\n  };\r\n\r\n  const [text, setText] = useState(\"\");\r\n  return (\r\n    <>\r\n      <div\r\n        className={`container text-${props.mode === \"dark\" ? \"light\" : \"dark\"}`}\r\n      >\r\n        <h1>{props.heading}</h1>\r\n        <div className=\"mb-3 \">\r\n          <textarea\r\n            style={{\r\n              backgroundColor: props.mode === \"dark\" ? \"grey\" : \"white\",\r\n              color: props.mode === \"dark\" ? \"white\" : \"black\",\r\n            }}\r\n            className=\"form-control\"\r\n            value={text}\r\n            onChange={handleOnChange}\r\n            id=\"myBox\"\r\n            rows=\"6\"\r\n          ></textarea>\r\n        </div>\r\n        <button className={`btn btn-${props.btn} mx-2`} onClick={handleUpCLick}>\r\n          Convert to Uppercase\r\n        </button>\r\n        <button className={`btn btn-${props.btn} mx-2`} onClick={handleLoCLick}>\r\n          Convert to Lowercase\r\n        </button>\r\n        <button className={`btn btn-${props.btn} mx-2`} onClick={clearText}>\r\n          Clear Text\r\n        </button>\r\n        <button\r\n          className={`btn btn-${props.btn} mx-2`}\r\n          onClick={handleredundancy}\r\n        >\r\n          Handle Redundancy\r\n        </button>\r\n        <button className={`btn btn-${props.btn} mx-2`} onClick={handleCopy}>\r\n          Copy Text\r\n        </button>\r\n        <button\r\n          className={`btn btn-${props.btn} mx-2`}\r\n          onClick={handleExcessSpaces}\r\n        >\r\n          Handle Excess Spaces\r\n        </button>\r\n      </div>\r\n      <div\r\n        className={`container my-3 text-${\r\n          props.mode === \"dark\" ? \"light\" : \"dark\"\r\n        }`}\r\n      >\r\n        <h2>Your text summary</h2>\r\n        <p>\r\n          {text.charAt(0) === \"\" ? 0 : text.trim().split(\" \").length} words and{\" \"}\r\n          {text.length} characters\r\n        </p>\r\n        <p>{0.008 * text.split(\" \").length} mins</p>\r\n        <h2>Preview</h2>\r\n        <p>\r\n          {text.length > 0\r\n            ? text\r\n            : \"Enter your something in the text box above to preview\"}\r\n        </p>\r\n      </div>\r\n    </>\r\n  );\r\n}\r\n","import React from \"react\";\r\n\r\nexport default function Alert(props) {\r\n  const capitalize = (word) => {\r\n    let lower = word.toLowerCase();\r\n    return lower.charAt(0).toUpperCase() + lower.slice(1);\r\n  };\r\n\r\n  return (\r\n    props.alert && (\r\n      <div\r\n        className={`alert alert-${props.alert.type} alert-dismissible fade show`}\r\n        role=\"alert\"\r\n      >\r\n        <strong>{capitalize(props.alert.type)} </strong> : {props.alert.msg}\r\n      </div>\r\n    )\r\n  );\r\n}\r\n","import \"./App.css\";\n// import PropTypes from \"prop-types\";\nimport Navbar from \"./components/Navbar\";\nimport TextForm from \"./components/TextForm\";\nimport About from \"./components/About\";\nimport React, { useState } from \"react\";\nimport Alert from \"./components/Alert\";\n// import { BrowserRouter as Router, Routes, Route} from \"react-router-dom\";\n\nfunction App() {\n  let toggleMode = () => {\n    if (mode === \"light\") {\n      setmode(\"dark\");\n      document.body.style.backgroundColor = \"grey\";\n      togglealert(\"Dark mode has been enabled\", \"success\");\n      document.title = `TextUtils:DarkMode`;\n      setbtn(\"dark\");\n    } else {\n      setmode(\"light\");\n      document.body.style.backgroundColor = \"white\";\n      togglealert(\"Light mode has been enabled\", \"success\");\n      setbtn(\"info\");\n      document.title = `TextUtils:LigthMode`;\n    }\n  };\n\n  const [mode, setmode] = useState(\"light\"); //whether dark mode is enabled or not\n  const [alert, setalert] = useState(null);\n  const [btn, setbtn] = useState(\"info\");\n  let togglealert = (message, type) => {\n    // if (mode === 'dark')\n    //   setalert(\"You are working in dark mode\");\n    // else\n    //   setalert(\"You are working in light mode\")\n    setalert({\n      msg: message,\n      type: type,\n    });\n    setTimeout(() => {\n      setalert(null);\n    }, 1000);\n  };\n  return (\n    <>\n      {/* <Router> */}\n      <Navbar title=\"TextUtils\" mode={mode} toggleMode={toggleMode} />\n      <Alert alert={alert} />\n      <div className=\"container my-3\">\n        {/* <Routes> */}\n        {/* <Route exact path=\"/about\" element={<About to=\"/About\" />}></Route> */}\n        {/* <Route\n              exact\n              path=\"/\"\n              element={ */}\n        <TextForm\n          heading=\"Enter text to analyze\"\n          mode={mode}\n          alert={togglealert}\n          btn={btn}\n        />\n        {/* }\n            />\n          </Routes> */}\n      </div>\n      {/* // </Router> */}\n      {/* <Alert alert={alert} /> */}\n      {/* <TextForm\n          heading=\"Enter Your Text to Analyze Below\"\n          alert={togglealert}\n          mode={mode}\n          btn={btn}\n        /> */}\n    </>\n  );\n}\n\nexport default App;\n// Navbar.propTypes = {\n//   title: PropTypes.string.isRequired,\n//   aboutText: PropTypes.string,\n// };\n\n// Navbar.defaultProps ={\n//   title:\"Strangers\",\n//   aboutText:\"About Me\"\n// }\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}